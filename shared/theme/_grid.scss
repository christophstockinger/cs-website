/**
 * Create an grid wrapper, which can have a max-width and would be centered.
 */
@mixin cs-grid-wrapper {
  $_padding: map-get($cs-grid-wrapper-padding, $cs-smallestGridBreakpoint);

  width: 100%;
  max-width: calc(#{$cs-max-content-width} + (2 * #{$_padding}));
  padding-right: $_padding;
  padding-left: $_padding;
  margin-right: auto;
  margin-left: auto;

  @each $-key, $-value in $cs-breakpoints {
    @include cs-respond-to($-key) {
      $_padding: map-get($cs-grid-wrapper-padding, $-key);

      max-width: calc(#{$cs-max-content-width} + (2 * #{$_padding}));
      padding-right: $_padding;
      padding-left: $_padding;
    }
  }

  // To prevent overflow
  &::after {
    display: table;
    clear: both;
    content: "";
  }
}

/**
 * Create an grid container, which contains grid cells.
 * You can compare it with Susy's `container` mixin in some way.
 */
@mixin cs-grid-container {
  $_margin: map-get($cs-grid-gutters, $cs-smallestGridBreakpoint) / -2;

  position: relative;
  display: flex;
  flex: 1 1 auto;
  flex-flow: row wrap;
  min-width: 100%;
  margin-right: $_margin;
  margin-left: $_margin;

  @each $-key, $-value in $cs-breakpoints {
    @include cs-respond-to($-key) {
      $_margin: map-get($cs-grid-gutters, $-key) / -2;

      margin-right: $_margin;
      margin-left: $_margin;
    }
  }
}

/**
 * Create an grid cell, which spans to x columns.
 * You can compare it with Susy's `span` mixin in some way.
 * @param {number} $_columns number of columns the cell spans.
 * @param {number} $_total-columns total number of columns.
 */
@mixin cs-grid-cell($_columns: 0, $_total-columns: $cs-grid-columns-default) {
  $_padding: map-get($cs-grid-gutters, $cs-smallestGridBreakpoint) / 2;

  position: relative;
  flex: 0 0 auto;
  padding-right: $_padding;
  padding-left: $_padding;

  @each $-key, $-value in $cs-breakpoints {
    @include cs-respond-to($-key) {
      $_padding: map-get($cs-grid-gutters, $-key) / 2;

      padding-right: $_padding;
      padding-left: $_padding;
    }
  }

  @if $_columns > 0 {
    @include cs-grid-cell-size($_columns, $_total-columns);
  }
}

/**
 * Offset a grid cell to the right.
 * You can compare it with Susy's `pre` mixin in some way.
 * @param {number} $_columns number of columns to offset.
 */
@function cs-grid-pre($_columns: 1, $_total-columns: $cs-grid-columns-default) {
  @return $_columns / $_total-columns * 100%;
}

@mixin cs-grid-pre($_columns: 1, $_total-columns: $cs-grid-columns-default) {
  margin-left: cs-grid-pre($_columns, $_total-columns);
}

/**
 * Add margin to the right of a grid cell.
 * You can compare it with Susy's `post` mixin in some way.
 * @param {number} $_columns number of columns margin should be added.
 */
@function cs-grid-post($_columns: 1, $_total-columns: $cs-grid-columns-default) {
  @return $_columns /  $_total-columns * 100%;
}

@mixin cs-grid-post($_columns: 1, $_total-columns: $cs-grid-columns-default) {
  margin-right: cs-grid-post($_columns, $_total-columns);
}

/**
 * Size the grid cell.
 * @param {number} $_columns number of columns the cell spans.
 * @param {number} $_total-columns total number of columns.
 */
@mixin cs-grid-cell-size($_columns: 1, $_total-columns: $cs-grid-columns-default) {
  $_width: cs-grid-cell-size($_columns, $_total-columns);

  width: $_width;
  max-width: $_width;
}

/**
 * Calculate the size of a grid cell, which spans to x columns.
 * @param {number} $_columns number of columns the cell spans.
 * @param {number} $_total-columns total number of columns.
 */
@function cs-grid-cell-size($_columns: 1, $_total-columns: $cs-grid-columns-default) {
  @return $_columns / $_total-columns * 100%;
}

/**
 * Size the grid cell.
 * @param {number} $_columns number of columns the cell spans.
 * @param {number} $_total-columns total number of columns.
 */
@mixin cs-size-grid-cell($_columns: 1, $_total-columns: $cs-grid-columns) {
  $_width: cs-grid-cell-size($_columns, $_total-columns);

  width: $_width;
  max-width: $_width;
}

/**
 * Create grid cells and add breakpoint name.
 * Size:        AP_cell-1 … AP_cell-12
 * Breakpoints: AP_cell-1-xs … AP_cell-1-xl
 * @param {string} $_breakpoint-name defined in $cs-grid-breakpoints
 */
@mixin cs-create-grid-cells($_breakpoint-name: "") {
  // If breakpoint name is defined, append it, e.g. AP_cell-6-xs
  @if $_breakpoint-name != "" {
    $_breakpoint-name: "-" + $_breakpoint-name;
  }

  @for $i from 1 through $cs-grid-columns {
    // Does a named cell size (e.g. third) exist?
    @if map-has-key($cs-grid-named-cells, $i) {
      // Then use both, e.g. AP_cell-6 and AP_cell-half
      &--#{$i}#{$_breakpoint-name},
      &--#{map-get($cs-grid-named-cells, $i)}#{$_breakpoint-name} {
        @include cs-size-grid-cell($i);
      }
    }

    @else {
      // If not, just use number, e.g. AP_cell-6
      &--#{$i}#{$_breakpoint-name} {
        @include cs-size-grid-cell($i);
      }
    }
  }

  // @each $_columns in $cs-grid-nested-ratios {
  //   @for $i from 1 through $_columns {
  //     &--#{$i}-of-#{$_columns}#{$_breakpoint-name} {
  //       @include cs-size-grid-cell($i, $_columns);
  //     }
  //   }
  // }
}

/**
 * Create grid cells for all breakpoints defined in $cs-grid-breakpoints.
 */
@mixin cs-create-grid-cells-for-breakpoints() {
  // Make default cells:
  @include cs-create-grid-cells;

  // Make all other cells depending on our breakpoint definition:
  @each $_bp-key, $_bp-def in $cs-grid-breakpoints {
    @include cs-respond-to($_bp-def) {
      @include cs-create-grid-cells($_bp-key);
    }
  }
}

/**
 * Create grid cell offsets and add breakpoint name.
 * Size:        AP_ext-pre-1 … AP_ext-pre-12
 * Breakpoints: AP_ext-pre-1-xs … AP_ext-pre-1-xl
 * Sides:       AP_ext-pre-1, AP_ext-post-1
 * @param {string} $_side margin is applied to pre (left) or post (right)
 * @param {string} $_breakpoint-name defined in $cs-grid-breakpoints
 */
@mixin cs-create-grid-cell-offsets($_side: pre, $_breakpoint-name: "") {
  // If breakpoint name is defined, append it, e.g. AP_ext-pre-6-xs
  @if $_breakpoint-name != "" {
    $_breakpoint-name: "-" + $_breakpoint-name;
  }

  // If side is `pre` apply margin on the left, otherwise on the right
  $_prop: if($_side == pre, margin-left, margin-right);

  // Class to remove margin
  &--#{$_side}-0#{$_breakpoint-name} {
    #{$_prop}: 0;
  }

  &--#{$_side} {
    @for $i from 1 through $cs-grid-columns {
      $_margin: cs-grid-cell-size($i);
      // Does a named cell size (e.g. third) exist?
      @if map-has-key($cs-grid-named-cells, $i) {
        // Then use both, e.g. AP_ext-pre-6 and AP_ext-pre-half
        &--#{$i}#{$_breakpoint-name},
        &--#{map-get($cs-grid-named-cells, $i)}#{$_breakpoint-name} {
          #{$_prop}: $_margin;
        }
      }

      @else {
        // If not, just use number, e.g. AP_ext-pre-6
        &--#{$i}#{$_breakpoint-name} {
          #{$_prop}: $_margin;
        }
      }
    }
  }
}

/**
 * Create grid cell offsets for all breakpoints defined in $cs-grid-breakpoints.
 */
@mixin cs-create-grid-cell-offsets-for-breakpoints() {
  // Make default cell offsets:
  @include cs-create-grid-cell-offsets(pre);
  @include cs-create-grid-cell-offsets(post);

  // Make all other cell offsets depending on our breakpoint definition:
  @each $_bp-name, $_bp-def in $cs-grid-breakpoints {
    @include cs-respond-to($_bp-def) {
      @include cs-create-grid-cell-offsets(pre, $_bp-name);
      @include cs-create-grid-cell-offsets(post, $_bp-name);
    }
  }
}
